<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>紫冰·Blog</title>
  
  <subtitle>我要飞的更高</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://liuyuekai.github.io/blog/"/>
  <updated>2017-07-07T04:04:49.000Z</updated>
  <id>https://liuyuekai.github.io/blog/</id>
  
  <author>
    <name>LiuYuekai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面包屑&amp;关闭提示</title>
    <link href="https://liuyuekai.github.io/blog/2017/07/%E6%8A%80%E6%9C%AF-%E9%9D%A2%E5%8C%85%E5%B1%91-%E5%85%B3%E9%97%AD%E6%8F%90%E7%A4%BA/"/>
    <id>https://liuyuekai.github.io/blog/2017/07/技术-面包屑-关闭提示/</id>
    <published>2017-07-07T04:04:49.000Z</published>
    <updated>2017-07-07T04:04:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面包屑"><a href="#面包屑" class="headerlink" title="面包屑"></a>面包屑</h2><h3 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h3><p>在页面内部要显示当前页面的路径信息</p><h3 id="实现的核心代码"><a href="#实现的核心代码" class="headerlink" title="实现的核心代码"></a>实现的核心代码</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> hash = <span class="built_in">window</span>.location.hash;</div><div class="line">hash = hash.slice(<span class="number">2</span>);</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">  <span class="keyword">var</span> menus = parent.<span class="built_in">window</span>.getBreadcrumb(hash);</div><div class="line">  <span class="keyword">this</span>.element.innerHTML = menus.join(<span class="string">" / "</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">  <span class="built_in">console</span>.log(e);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通过当前页面的url获取应用id，然后调用父层window上提供的接口getBreadcrumb来获取路径信息</p><h2 id="关闭提示"><a href="#关闭提示" class="headerlink" title="关闭提示"></a>关闭提示</h2><h3 id="需求描述-1"><a href="#需求描述-1" class="headerlink" title="需求描述"></a>需求描述</h3><p>当关闭portal中的页面时需要增加判断，如果存在修改则不进行关闭</p><h3 id="实现的核心代码-1"><a href="#实现的核心代码-1" class="headerlink" title="实现的核心代码"></a>实现的核心代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.confirmClose = <span class="function"><span class="keyword">function</span>(<span class="params">id,data</span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> flag = <span class="number">1</span>;</div><div class="line"><span class="comment">// 判断单表档案的弹框界面是否显示</span></div><div class="line"><span class="keyword">if</span>($(<span class="string">"#dialog_layer"</span>).is(<span class="string">":visible"</span>))&#123;</div><div class="line">flag = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//判断主子页面的单据子页面是否显示</span></div><div class="line"><span class="keyword">if</span>($(<span class="string">".ui-panel.ui-bill-panel"</span>).is(<span class="string">":visible"</span>))&#123;</div><div class="line">flag = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 如果处于浏览态直接关闭页签,处于编辑态弹框提醒,确认后关闭页签</span></div><div class="line"><span class="keyword">if</span>(flag)&#123;</div><div class="line"><span class="built_in">window</span>.parent.confirmDel(data)</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">$.confirmDialog(&#123;</div><div class="line">msg1: <span class="string">"当前页面数据还未保存，是否关闭"</span>,</div><div class="line">msg2: <span class="string">'此操作不可逆'</span>,</div><div class="line">width: <span class="string">"400px"</span>,</div><div class="line">onOk: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="built_in">window</span>.parent.confirmDel(data)</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在页面内实现接口方法confirmClose，当执行关闭操作时portal会调用此方法。</p><p>如果允许执行关闭操作，则调用portal已提供的方法window.parent.confirmDel(data)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;面包屑&quot;&gt;&lt;a href=&quot;#面包屑&quot; class=&quot;headerlink&quot; title=&quot;面包屑&quot;&gt;&lt;/a&gt;面包屑&lt;/h2&gt;&lt;h3 id=&quot;需求描述&quot;&gt;&lt;a href=&quot;#需求描述&quot; class=&quot;headerlink&quot; title=&quot;需求描述&quot;&gt;&lt;/a&gt;需求描
      
    
    </summary>
    
      <category term="技术" scheme="https://liuyuekai.github.io/blog/categories/technology/"/>
    
    
  </entry>
  
  <entry>
    <title>多语支持方案</title>
    <link href="https://liuyuekai.github.io/blog/2017/03/%E9%9A%8F%E7%AC%94-%E5%A4%9A%E8%AF%AD%E6%94%AF%E6%8C%81%E6%96%B9%E6%A1%88/"/>
    <id>https://liuyuekai.github.io/blog/2017/03/随笔-多语支持方案/</id>
    <published>2017-03-22T06:47:15.000Z</published>
    <updated>2017-07-27T07:22:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>多语方案主要有2种实现方式</p><h2 id="i18n-js针对对js文件进行多语"><a href="#i18n-js针对对js文件进行多语" class="headerlink" title="i18n.js针对对js文件进行多语"></a>i18n.js针对对js文件进行多语</h2><h3 id="方案说明"><a href="#方案说明" class="headerlink" title="方案说明"></a>方案说明</h3><ul><li>json文件存储多语资源</li><li>通过i18n.js提供的接口来实现读取多语资源文件并封装方法trans用于获取具体的多语资源</li><li>功能源码中调用trans方法来获取多语资源<h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3></li><li><p>json文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"gridComp"</span>: &#123;</div><div class="line">      <span class="attr">"show_column"</span>: <span class="string">"显示 隐藏列"</span>,</div><div class="line">      <span class="attr">"clear_set"</span>: <span class="string">"清除设置"</span>,</div><div class="line">      <span class="attr">"no_rows"</span>: <span class="string">"无数据"</span>,</div><div class="line">      <span class="attr">"sum"</span>: <span class="string">"合计:"</span>,</div><div class="line">  <span class="attr">"close"</span>:<span class="string">"关闭"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>trans方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.i18n) &#123;</div><div class="line"><span class="built_in">window</span>.u = <span class="built_in">window</span>.u || &#123;&#125;;</div><div class="line">    <span class="keyword">var</span> scriptPath = getCurrentJsPath(),</div><div class="line">        _temp = scriptPath.substr(<span class="number">0</span>, scriptPath.lastIndexOf(<span class="string">'/'</span>)),</div><div class="line">        __FOLDER__ = _temp.substr(<span class="number">0</span>, _temp.lastIndexOf(<span class="string">'/'</span>)),</div><div class="line">        resGetPath = u.i18nPath || __FOLDER__ + <span class="string">'/locales/__lng__/__ns__.json'</span>;</div><div class="line">    i18n.init(&#123;</div><div class="line">        postAsync: <span class="literal">false</span>,</div><div class="line">        getAsync: <span class="literal">false</span>,</div><div class="line">        fallbackLng: <span class="literal">false</span>,</div><div class="line">        ns: &#123;<span class="attr">namespaces</span>: [<span class="string">'uui-trans'</span>]&#125;,</div><div class="line">lng:getCookie(U_LOCALE) || <span class="string">'zh'</span>,</div><div class="line">        resGetPath: resGetPath</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> trans = <span class="function"><span class="keyword">function</span> (<span class="params">key, dftValue</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span>  <span class="built_in">window</span>.i18n ?  i18n.t(<span class="string">'uui-trans:'</span> + key) : dftValue</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>功能代码</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.gridOptions.transMap = &#123;</div><div class="line">            ml_show_column: trans(<span class="string">'gridComp.show_column'</span>, <span class="string">'显示/隐藏列'</span>),</div><div class="line">            ml_clear_set: trans(<span class="string">'gridComp.clear_set'</span>, <span class="string">'清除设置'</span>),</div><div class="line">            ml_no_rows: trans(<span class="string">'gridComp.no_rows'</span>, <span class="string">'无数据'</span>),</div><div class="line">            ml_sum: trans(<span class="string">'gridComp.sum'</span>, <span class="string">'合计:'</span>),</div><div class="line">            ml_close: trans(<span class="string">'gridComp.close'</span>, <span class="string">'关闭'</span>)</div><div class="line">        &#125;;</div></pre></td></tr></table></figure></li></ul><h2 id="webpack对所有源码进行多语"><a href="#webpack对所有源码进行多语" class="headerlink" title="webpack对所有源码进行多语"></a>webpack对所有源码进行多语</h2><h3 id="方案说明-1"><a href="#方案说明-1" class="headerlink" title="方案说明"></a>方案说明</h3><p>页面源码为<code>index.htlm</code>以及<code>index.js</code>，同时配置多语资源json文件与源码中需要多语的内容进行对应。<a href="../../iuapDesign/uui-old/example/model/grid/download-overtext.html">download-overtext.html</a><br>借助webpack产出多语文件：中文为<code>index.zh.html</code>以及<code>index.zh.js</code>，英文为<code>index.en.html</code>以及<code>index.en.js</code></p><h3 id="核心代码-1"><a href="#核心代码-1" class="headerlink" title="核心代码"></a>核心代码</h3><p>可参照<code>git@github.com:GuoYongfeng/i18n-webpack-demos.git</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;多语方案主要有2种实现方式&lt;/p&gt;
&lt;h2 id=&quot;i18n-js针对对js文件进行多语&quot;&gt;&lt;a href=&quot;#i18n-js针对对js文件进行多语&quot; class=&quot;headerlink&quot; title=&quot;i18n.js针对对js文件进行多语&quot;&gt;&lt;/a&gt;i18n.js针对对j
      
    
    </summary>
    
      <category term="随笔" scheme="https://liuyuekai.github.io/blog/categories/jottings/"/>
    
    
  </entry>
  
</feed>
